# Golang类型系统

## 动态类型与静态类型

静态类型`static type`就是变量声明时候的类型，动态类型`concrete type`就是程序运行时的类型。

```go
func main() {
	var varStr string  // 静态类型是string
	var varInt int     // 静态类型是int

	var i interface{}  // i的静态类型是interface{}
	i = 10             // i的静态类型仍然是interface{}, 动态类型是int
	i = "TOMOCAT"      // i的静态类型仍然是interface{}, 动态类型是string

	return
}
```

## Golang中的接口

#### 1. 接口组成

Golang中每一个接口变量都可以认为是由`type`和`data`组成的`pair`对构成的。举个例子：

```go
varStr := "TOMOCAT"  // type是string, data是TOMOCAT
varInt := 23         // type是int, data是23
```

> 根据接口是否实现了方法，可以分为`iface`和`eface`。

#### 2. iface

```go
// runtime/runtime2.go
type iface struct {
	tab  *itab           // 类型指针
	data unsafe.Pointer  // 数据指针
}

/*
 inter: 静态类型指针, 表示接口定义的类型信息
 _type: 动态类型指针, 表示实际指向值的类型信息
 fun:   接口方法实现列表(函数地址列表), 按字典序排列
 */
type itab struct {
	inter *interfacetype
	_type *_type
	hash  uint32 // copy of _type.hash. Used for type switches.
	_     [4]byte
	fun   [1]uintptr // variable sized. fun[0]==0 means _type does not implement inter.
}

type interfacetype struct {
	typ     _type      // 接口类型
	pkgpath name       // 包路径
	mhdr    []imethod  // 接口方法声明列表
}

type imethod struct {
	name nameOff  // 方法名
	ityp typeOff  // 方法参数和返回值等细节
}
```

#### 3. eface

```go
type eface struct {
	_type *_type          // 类型指针
	data  unsafe.Pointer  // 数据指针
}
```

## 接口与动态类型

#### 1. iface

`reader`的静态类型是`io.Reader`，该接口实现了方法，因此属于`iface`。

```go
var reader io.Reader  // reader的静态类型是io.Reader, 没有动态类型
cat, _ := os.OpenFile("cat.txt", os.O_RDWR, 0)
reader = cat          // reader的静态类型是io.Reader, 动态类型是*os.File
```

#### 2. eface

`reader`的静态类型是`interface{}`，该接口没有实现方法，因此属于`eface`。

```go
var reader interface{}  // 此时reader的_type为nil
cat, _ := os.OpenFile("cat.txt", os.O_RDWR, 0)
reader = cat            // 此时reader的_type为*os.File
```

