# 作用域和可见性

## 显式语句块和隐式语句块

#### 1. 显式语句块

用花括号`{}`包含的语句块是显式语句块。

#### 2. 隐式语句块

* 主语句块：包括所有源码，对应内置作用域
* 包语句块：包含该包中的所有源码，对应包级作用域
* 文件语句块：包括该文件的所有源码，对应文件级作用域
* `for`、`if`和`switch`等语句本身也在它自身的隐式语句块中，对应局部作用域

关于第四点的详细说明：

```go
// for循环结束后无法再使用循环变量i
for i := 0; i < 10; i++ {
    fmt.Println(i)
}

// if语句中声明变量, 判断完后也不可再使用变量i
if i := 10; i < 20 {
    fmt.Println(i)
}

// switch语句中声明变量, 判断完后也不可再使用变量i
switch i := 10; i {
case 1:
	fmt.Println(1)
case 10:
	fmt.Println(10)
default:
	fmt.Println("unexpected value")
}
```

## 作用域

> 作用域和生命周期的区别：
>
> * 声明语句的作用域是编译时属性，对应的是源代码的一段文本区域
> * 生命周期是运行时属性，表明在此时间区域内可以被程序的其他部分所引用

#### 1. 四种作用域

根据声明位置的不同，作用域包含如下四种类型：

* 内置作用域：不需要自己声明，所有的关键字、内置类型和内置函数都具有全局作用域
* 包级作用域：必须函数外声明，在该包内的所有文件都可访问
* 文件级作用域：单个文件中通过`import`导入的包名，只在该文件内可访问
* 局部作用域：在自己的语句块内声明（包括函数、`for`、`if`和`switch`等语句块或者自定义的`{}`语句块），只在语句块内可访问

#### 2. 作用域与可见性

> 全局变量：在`main`函数调用前初始化，全局可见
>
> 局部变量：在函数内部或者`if`、`for`等语句块有效，使用之后外部不可见

* 内层作用域可访问外层作用域
* 同一层级的作用域互相隔离
* 内层作用域内声明的变量会覆盖外层作用域声明的同名变量