# 单元测试

## 简介

尽管单元测试几乎是实际开发中必备的一个环节，但其他语言鲜有支持的，Go在语言层面提供了单元测试的特性，可以很方便地撰写单测文件。

## testing标准库

#### 1. 介绍

golang自带的testing库可以很方便地为package提供自动化测试，单测文件指的是在待测试的包下创建的以`_test.go`结尾的文件。单测函数分为功能测试函数和性能测试函数，分别以Test和Benchmark为前缀：

```go
// 功能测试函数
func TestFoo(t *testing.T)

// 性能测试函数
func BenchmarkBar(b *testing.B)
```

执行测试的时候，直接使用`go test`加上对应的包名即可：

```go
go test my_package
```

#### 2. 功能测试函数

待测试函数：

```go
// Add 返回两数之和
func Add(a, b int) int {
	return a + b
}
```

功能测试函数：

```go
func TestAdd(t *testing.T) {
	// 构造case
	cases := []struct {
		left     int
		right    int
		excepted int
	}{
		{1, 1, 2},
		{2, 2, 4},
		{1, 5, 6},
		{10, 20, 30},
		{99999, 1, 100000},
	}

	// 通过Error或者Errorf函数使单测失败
	for _, c := range cases {
		if c.excepted != Add(c.left, c.right) {
			t.Errorf("Add fail, left:%d right:%d expect:%d\n", c.left, c.right, c.excepted)
		}
	}
}

// 输出:
=== RUN   TestAdd
--- PASS: TestAdd (0.00s)
PASS
```

#### 3. 性能测试函数

###### 3.1 性能测试函数简单例子

```go
func BenchmarkAdd(b *testing.B) {
	for i := 0; i < b.N; i++ {
		Add(i, i)
	}
}

// 输出:
goos: darwin
goarch: amd64
pkg: aweSomeProject/src/main
BenchmarkAdd
BenchmarkAdd-12    	1000000000	         0.526 ns/op
PASS
```

###### 3.2 性能测试函数参数

注意Benchmark输出的各项参数如下：

| 参数            | 含义                   | 备注          |
| --------------- | ---------------------- | ------------- |
| goos            | 操作系统               | darwin表示Mac |
| goarch          | 处理器架构             |               |
| BenchmarkAdd-12 | -12表示12个逻辑CPU     |               |
| 1000000000      | 执行次数是1000000000次 |               |
| 0.526 ns/op     | 每次操作耗时           |               |

###### 3.3 性能测试函数计时器

如果性能测试函数中有一些额外的初始化操作时，可以通过 启停计时器来屏蔽这些操作对最终测试结果的影响：

```go
func BenchmarkAdd(b *testing.B) {
	// 以sleep函数代替耗时的初始化
	time.Sleep(10 * time.Second)

	for i := 0; i < b.N; i++ {
		Add(i, i)
	}
}

// 输出:
goos: darwin
goarch: amd64
pkg: aweSomeProject/src/main
BenchmarkAdd
BenchmarkAdd-12    	       1	10004399488 ns/op
PASS
```

从上面的结果可以看到如果在Benchmark函数中加入比较复杂的初始化函数，可能导致性能测试结果不准，我们可以通过控制Benchmark的Timer来解决这个问题：

```go
func BenchmarkAdd(b *testing.B) {
	// 以sleep函数代替耗时的初始化
	b.StopTimer()
	time.Sleep(10 * time.Second)
	b.StartTimer()

	for i := 0; i < b.N; i++ {
		Add(i, i)
	}
}

// 输出:
goos: darwin
goarch: amd64
pkg: aweSomeProject/src/main
BenchmarkAdd
BenchmarkAdd-12    	1000000000	         0.267 ns/op
PASS
```

#### 4. go test常用参数

| 参数       | 含义                     | 备注                                       |
| ---------- | ------------------------ | ------------------------------------------ |
| -cpu       | 测试最大逻辑CPU数        | 默认等于CPU核数                            |
| -count     | 执行测试函数的次数       | 默认为1                                    |
| -run       | 执行功能测试函数         | 支持正则匹配，可以选择测试函数或者测试文件 |
| -bench     | 执行性能测试函数         | 支持正则匹配                               |
| -benchtime | 性能测试最大探索时间上限 |                                            |
| -parallel  | 设置最大并发执行数       |                                            |
| -v         | 显示测试过程信息         |                                            |

## GoConvey

#### 1. 简介

goconvey可以很方便地撰写单测用例，使用`So`进行断言：

```go
import (
	. "github.com/smartystreets/goconvey/convey"
	"testing"
)

// TestAdd 测试Add函数
func TestAdd(t *testing.T) {
	Convey("1 + 1 = 2", t, func() {
		So(Add(1, 1), ShouldEqual, 2)
	}) 
}
```

对于未写完的测试可以设置成nil或者skip：

```go
func TestAdd(t *testing.T) {
	Convey("Description", t, func() {
		Convey("1 + 1 = 2", func() {
			So(Add(1, 1), ShouldEqual, 2)
		})

		// 暂未完成的Convey可以跳过
		Convey("This isn't yet implemented", nil)
	})
}
```

#### 2. 支持的断言

###### 2.1 通用断言

```go
So(thing1, ShouldEqual, thing2)
So(thing1, ShouldNotEqual, thing2)
// a deep equals for arrays, slices, maps, and structs
So(thing1, ShouldResemble, thing2)
So(thing1, ShouldNotResemble, thing2)
So(thing1, ShouldPointTo, thing2)
So(thing1, ShouldNotPointTo, thing2)
So(thing1, ShouldBeNil)
So(thing1, ShouldNotBeNil)
So(thing1, ShouldBeTrue)
So(thing1, ShouldBeFalse)
So(thing1, ShouldBeZeroValue)
```

###### 2.2 数值比较断言

```go
So(1, ShouldBeGreaterThan, 0)
So(1, ShouldBeGreaterThanOrEqualTo, 0)
So(1, ShouldBeLessThan, 2)
So(1, ShouldBeLessThanOrEqualTo, 2)
So(1.1, ShouldBeBetween, .8, 1.2)
So(1.1, ShouldNotBeBetween, 2, 3)
So(1.1, ShouldBeBetweenOrEqual, .9, 1.1)
So(1.1, ShouldNotBeBetweenOrEqual, 1000, 2000)
// tolerance is optional; default 0.0000000001
So(1.0, ShouldAlmostEqual, 0.99999999, .0001)
So(1.0, ShouldNotAlmostEqual, 0.9, .0001)
```

###### 2.3 集合断言

```go
So([]int{2, 4, 6}, ShouldContain, 4)
So([]int{2, 4, 6}, ShouldNotContain, 5)
So(4, ShouldBeIn, ...[]int{2, 4, 6})
So(4, ShouldNotBeIn, ...[]int{1, 3, 5})
So([]int{}, ShouldBeEmpty)
So([]int{1}, ShouldNotBeEmpty)
So(map[string]string{"a": "b"}, ShouldContainKey, "a")
So(map[string]string{"a": "b"}, ShouldNotContainKey, "b")
So(map[string]string{"a": "b"}, ShouldNotBeEmpty)
So(map[string]string{}, ShouldBeEmpty)
// supports map, slice, chan, and string
So(map[string]string{"a": "b"}, ShouldHaveLength, 1)
```

###### 2.4 字符串断言

```go
So("asdf", ShouldStartWith, "as")
So("asdf", ShouldNotStartWith, "df")
So("asdf", ShouldEndWith, "df")
So("asdf", ShouldNotEndWith, "df")
So("asdf", ShouldContainSubstring, "sd")
So("asdf", ShouldNotContainSubstring, "er")
So("adsf", ShouldBeBlank)
So("asdf", ShouldNotBeBlank)
```

###### 2.5 panic断言

```go
So(func(), ShouldPanic)
So(func(), ShouldNotPanic)
So(func(), ShouldPanicWith, "")		// or errors.New("something")
So(func(), ShouldNotPanicWith, "")	// or errors.New("something")
```

###### 2.6 类型断言

```go
So(1, ShouldHaveSameTypeAs, 0)
So(1, ShouldNotHaveSameTypeAs, "asdf")
```

###### 2.7 时间断言

```go
So(time.Now(), ShouldHappenBefore, time.Now())
So(time.Now(), ShouldHappenOnOrBefore, time.Now())
So(time.Now(), ShouldHappenAfter, time.Now())
So(time.Now(), ShouldHappenOnOrAfter, time.Now())
So(time.Now(), ShouldHappenBetween, time.Now(), time.Now())
So(time.Now(), ShouldHappenOnOrBetween, time.Now(), time.Now())
So(time.Now(), ShouldNotHappenOnOrBetween, time.Now(), time.Now())
So(time.Now(), ShouldHappenWithin, duration, time.Now())
So(time.Now(), ShouldNotHappenWithin, duration, time.Now())
```

#### 3. 自定义断言

当goconvey提供的标准断言不满足需求时，可以使用如下的自定义断言：

```go
func should<do-something>(actual interface{}, expected ...interface{}) string {
    if <some-important-condition-is-met(actual, expected)> {
        return ""   // empty string means the assertion passed
    }
    return "<some descriptive message detailing why the assertion failed...>"
}
```

#### 4. 用例执行顺序

前面提到Convey支持树形结构，这样的测试用例组织方式可以方便我们消除重复的初始化代码，举个例子：

```go
Convey A
	So 1
	So 2
	Convey B
		So 3
		Convey C
			So 4
	Convey D
		So 5
```

上述case组织形式下用例的执行顺序为：A12B3C4A12D5。

#### 5. Reset

部分convey的执行需要依赖一些初始化函数，在这些convey执行完后可以使用`Reset()`函数来清除对应的环境配置：

```go
Convey("Test db operation", t, func() {
    // setup (run before each `Convey` at this scope):
    db.Open()
    db.Initialize()

    Convey("Test query()", func() {
        db.Query()
        // TODO: assertions here
    })

    Convey("Test insert()", func() {
        db.Insert()
        // TODO: assertions here
    })

    Reset(func() {
        // This reset is run after each `Convey` at the same scope.
        db.Close()
    })

})
```

#### 6. 跳过断言

对于需要跳过的断言，我们有如下三种方式实现：

```go
// 跳过整个convey
SkipConvey("Foo", func() {
    // ...
})

// 跳过未完成的convey
Convey("Foo", func() {
    convey("This isn't yet implemented", nil)
})

// 跳过So断言
Convey("Test Add" func() {
    SkipSo(Add(1, 1), ShouldEqual, 2)
})
```

## testify

#### 1. 简洁

和C++单测框架gtest类似，testify提供了assert和require，让你的单测代码更加简洁高效。

#### 2. assert

assert可以使得单测中的断言更加清晰：

```go
package main

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestAdd(t *testing.T) {
	assert.Equal(t, 2, Add(1, 1))
}
```

#### 3. require

require的使用方法和assert相同，唯一的不同在于assert仅仅返回布尔值而require在断言不通过时会中断程序运行。

#### 4. 其他常用断言

```go
func Equal(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) bool
func NotEqual(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) bool

func Nil(t TestingT, object interface{}, msgAndArgs ...interface{}) bool
func NotNil(t TestingT, object interface{}, msgAndArgs ...interface{}) bool

func Empty(t TestingT, object interface{}, msgAndArgs ...interface{}) bool
func NotEmpty(t TestingT, object interface{}, msgAndArgs ...interface{}) bool

func NoError(t TestingT, err error, msgAndArgs ...interface{}) bool
func Error(t TestingT, err error, msgAndArgs ...interface{}) bool

func Zero(t TestingT, i interface{}, msgAndArgs ...interface{}) bool
func NotZero(t TestingT, i interface{}, msgAndArgs ...interface{}) bool

func True(t TestingT, value bool, msgAndArgs ...interface{}) bool
func False(t TestingT, value bool, msgAndArgs ...interface{}) bool

func Len(t TestingT, object interface{}, length int, msgAndArgs ...interface{}) bool

func NotContains(t TestingT, s, contains interface{}, msgAndArgs ...interface{}) bool
func NotContains(t TestingT, s, contains interface{}, msgAndArgs ...interface{}) bool
func Subset(t TestingT, list, subset interface{}, msgAndArgs ...interface{}) (ok bool)
func NotSubset(t TestingT, list, subset interface{}, msgAndArgs ...interface{}) (ok bool)

func FileExists(t TestingT, path string, msgAndArgs ...interface{}) bool
func DirExists(t TestingT, path string, msgAndArgs ...interface{}) bool
```

#### 5. 表驱动测试

testify的使用也可以简化表驱动测试之类的方法：

```go
package main

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestAdd(t *testing.T) {
	ass := assert.New(t)

	var cases = []struct {
		lhs      int // 左侧运算对象
		rhs      int // 右侧运算对象
		expected int
	}{
		{1, 1, 2},
		{2, 2, 4},
		{9999, 1, 10000},
		{555, 444, 999},
	}

	for _, c := range cases {
		ass.Equal(c.expected, Add(c.lhs, c.rhs))
	}
}
```

## Reference

[1] https://zhuanlan.zhihu.com/p/267341653

[2] https://www.cnblogs.com/jssyjam/p/10728801.html

[3] http://www.lampnick.com/php/732

[4] https://www.codercto.com/a/44507.html